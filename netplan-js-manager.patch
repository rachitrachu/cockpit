--- netplan-js-manager.js.original
+++ netplan-js-manager.js.fixed
@@ -3170,6 +3170,7 @@
       }
       
       // Comprehensive preservation: ensure ALL interfaces from original config are preserved
+      console.log('üîß ENHANCED: Starting comprehensive VLAN preservation...');
       for (const sectionType of ['vlans', 'ethernets', 'bridges', 'bonds']) {
         if (originalConfig.network && originalConfig.network[sectionType]) {
           
@@ -3180,9 +3181,10 @@
           
           for (const ifName in originalConfig.network[sectionType]) {
             const originalIf = originalConfig.network[sectionType][ifName];
             
-            // Skip the interface we're currently modifying
-            if (ifName === name) continue;
+            // CRITICAL FIX: Don't skip any interfaces during preservation
+            // We'll update the target interface AFTER preservation
             
+            console.log(`üîí ENHANCED: Processing interface ${ifName} (${sectionType})`);
             // If this interface doesn't exist in our config, add it completely
             if (!netplanConfig.network[sectionType][ifName]) {
               console.log(`üîí Preserving entire interface ${ifName} (${sectionType}):`, originalIf);
@@ -3191,6 +3193,12 @@
               // Interface exists, merge properties carefully
               const currentIf = netplanConfig.network[sectionType][ifName];
               
+              // For the target interface being modified, preserve everything except what we're changing
+              if (ifName === name) {
+                console.log(`üéØ ENHANCED: Preserving non-IP properties for target interface ${name}`);
+                // We'll handle IP update separately after preservation
+              }
+              
               // Critical properties that must be preserved if they exist in original
               // UPDATED: Made consistent with main preservation function critical properties list
               const criticalProps = [
@@ -3221,6 +3229,7 @@
                 'emit-lldp', 'receive-checksum-offload', 'transmit-checksum-offload', // Hardware offload
                 'generic-receive-offload', 'generic-segmentation-offload', 'large-receive-offload', // More hardware offload
                 'tcp-segmentation-offload', 'tcp6-segmentation-offload' // TCP offload
               ];
               
               criticalProps.forEach(prop => {
@@ -3238,13 +3247,29 @@
           }
         }
       }
+      
+      console.log('üîß ENHANCED: Preservation complete, now updating target interface IP...');
+      
+      // NOW update the target interface with new IP configuration
+      // This ensures we preserve everything first, then apply the IP change
+      if (interfaceSection) {
+        if (static_ip && static_ip.trim() !== '') {
+          interfaceSection.addresses = [static_ip];
+          interfaceSection.dhcp4 = false;
+          interfaceSection.dhcp6 = false;
+          console.log(`‚úÖ ENHANCED: Updated ${name} with new IP: ${static_ip}`);
+        } else {
+          delete interfaceSection.addresses;
+          interfaceSection.dhcp4 = true;
+          console.log(`‚úÖ ENHANCED: Updated ${name} to use DHCP`);
+        }
+      }
       
       // CRITICAL: Preserve existing routes
       if (existingRoutes.length > 0) {
         interfaceSection.routes = existingRoutes;
         console.log(`Preserved ${existingRoutes.length} routes for ${name} in ${interfaceType} section`);
       }
     }
     
-    // Write to appropriate file using proper multi-file strategy
-    // About to write config using multi-file strategy
-    const writeOk = await writeNetplanConfig(netplanConfig);
+    // ENHANCED: Use atomic write strategy for VLAN IP edits to prevent configuration splitting
+    console.log('üíæ ENHANCED: Using atomic write strategy to prevent VLAN loss...');
+    const writeOk = await writeNetplanConfigAtomic(netplanConfig);
     if (!writeOk) {
       return { error: `Failed to write netplan configuration using multi-file strategy` };
     }
@@ -3280,6 +3315,44 @@
   }
 }
 
+/**
+ * ENHANCED: Atomic write strategy for VLAN IP edits
+ * This prevents configuration splitting that can cause VLAN loss
+ */
+async function writeNetplanConfigAtomic(config) {
+  console.log('üíæ ENHANCED: Writing netplan config using atomic strategy (safer for VLAN edits)');
+  
+  // Write everything to a single file to avoid split issues
+  const targetFile = '/etc/netplan/80-cockpit-interfaces.yaml';
+  
+  // Ensure we have a complete configuration
+  const atomicConfig = {
+    network: {
+      version: config.network.version || 2,
+      renderer: config.network.renderer || 'networkd',
+      ethernets: config.network.ethernets || {},
+      vlans: config.network.vlans || {},
+      bridges: config.network.bridges || {},
+      bonds: config.network.bonds || {}
+    }
+  };
+  
+  console.log('üíæ ENHANCED: Writing atomic config with VLANs:', Object.keys(atomicConfig.network.vlans));
+  
+  // Write to single file atomically
+  try {
+    const success = await writeNetplanFile(targetFile, atomicConfig);
+    if (success) {
+      console.log('‚úÖ ENHANCED: Atomic write successful');
+    }
+    return success;
+  } catch (error) {
+    console.error('‚ùå ENHANCED: Atomic write failed:', error);
+    return false;
+  }
+}
+
+// Export the atomic write function
+window.writeNetplanConfigAtomic = writeNetplanConfigAtomic;
+
 /**
  * Set MTU for an interface
  */
