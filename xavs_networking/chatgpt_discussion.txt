# Additional ChatGPT Discussion - Netplan Networking Module

[Please paste the content from the ChatGPT conversation here]
Absolutely, Xloud. To make Copilot Pro in VS Code hum and scaffold your Cockpit module quickly, here is a single, “drop‑in” spec file you can paste into your repo. It’s structured, opinionated, and written in a way Copilot can easily infer types, file layouts, command flows, and edge‑case handling.

Where to save: docs/XAVS-Networking-SPEC.md
Scope (Phase 1): Physical NICs, VLANs, Bridges, Bonds, Static routes.
Renderer: systemd-networkd (server‑grade).
Netplan files: Minimal multi‑file (baseline + one managed file).
Phase 2 (out‑of‑scope here): Policy‑based routing (routing‑policy rules), virtual/tunnel interfaces.

# XAVS Networking — Cockpit + Netplan Implementation Spec (Phase 1)

**Module**: `xavs_networking`  
**Cockpit branch**: `XAVS-Rachit_NEW`  
**Objective**: Production-grade, low-downtime, idempotent network management for Ubuntu servers using Netplan with a minimal multi-file strategy.  
**Outcomes**: Deterministic YAML writes, safe apply/rollback (`netplan try`), route/IP preservation, clear ownership, guardrails for critical links.

---

## 0) Design Tenets

- **Production safety first**: All disruptive changes go through `netplan try` with a visible countdown + auto-rollback (default 120s) to avoid lockouts. :contentReference[oaicite:0]{index=0}  
- **Minimal netplan files**: Keep installer’s `00-installer-config.yaml` as the baseline. Create one managed file (`10-xavs.yaml`) and ensure each interface is declared in exactly one file to avoid merge surprises. (Netplan merges config in **lexicographic** order across `/run`, `/etc`, `/lib`; later files amend/override earlier.) :contentReference[oaicite:1]{index=1}  
- **Renderer = networkd**: Default to `networkd` (server-grade, no GUI dependencies).  
- **Deterministic ownership**: Each interface (ethernet/vlan/bond/bridge) is “owned” by exactly one YAML file; the module enforces this at write time.

---

## 1) Netplan File Strategy

- **Baseline**: Keep `00-installer-config.yaml` as-is for initial bootstrapping (physical NIC(s), maybe some routes).  
- **Managed file**: Create `10-xavs.yaml` (lexicographically after baseline). All *new* or *edited* interfaces are (re)declared here to avoid multi-file merges for the same interface. If editing an interface currently in baseline, **lift** it out: remove its stanza from baseline and rehome it to `10-xavs.yaml` (with backup). This guarantees single-writer per interface and prevents list merges (e.g., DNS, routes) from surprising you. (Netplan merges later files over earlier ones; `/run` > `/etc` > `/lib`.) :contentReference[oaicite:2]{index=2}

**Atomic writes & backup policy**
- On every change: write `10-xavs.yaml.new` → `fsync` → `rename()` to `10-xavs.yaml`.  
- When lifting from baseline: copy `00-installer-config.yaml` to `00-installer-config.yaml.bak.<ts>` before editing; then remove only the moved stanza.  
- Keep a module state file: `/var/lib/xavs-networking/state.json` (ownership map, last-apply hash, last-try result).

---

## 2) Interface Types & Canonical Modeling

**Internal TS-style types** (even if you write JS, these guide Copilot):

```ts
type IfaceName = string;
type IPv4Cidr = string;  // "10.10.10.2/24"
type IPv6Cidr = string;

type Nameservers = { addresses: string[]; search?: string[] };

type Route = {
  to: string;           // "default" or CIDR
  via?: string;         // gw IP
  metric?: number;
  table?: number;       // keep for Phase 2 compatibility
  on_link?: boolean;
};

type Ethernet = {
  kind: "ethernet";
  name: IfaceName;
  dhcp4?: boolean;
  dhcp6?: boolean;
  addresses?: (IPv4Cidr | IPv6Cidr)[];
  nameservers?: Nameservers;
  routes?: Route[];
  optional?: boolean; // recommended true for non-critical slave ports
};

type Vlan = {
  kind: "vlan";
  name: IfaceName;  // vlan15, eno1.15, etc.
  id: number;       // 1..4094
  link: IfaceName;  // parent NIC or bond/bridge member
  dhcp4?: boolean;
  dhcp6?: boolean;
  addresses?: (IPv4Cidr | IPv6Cidr)[];
  nameservers?: Nameservers;
  routes?: Route[];
};

type Bond = {
  kind: "bond";
  name: IfaceName;      // bond0
  interfaces: IfaceName[];
  mode: "active-backup" | "802.3ad" | "balance-rr" | "balance-xor" | "broadcast" | "balance-tlb" | "balance-alb";
  dhcp4?: boolean;
  dhcp6?: boolean;
  addresses?: (IPv4Cidr | IPv6Cidr)[];
  nameservers?: Nameservers;
  routes?: Route[];
  parameters?: Record<string, string | number | boolean>; // lacp_rate, mii-monitor-interval, primary, etc.
};

type Bridge = {
  kind: "bridge";
  name: IfaceName;      // br0
  interfaces: IfaceName[];
  dhcp4?: boolean;
  dhcp6?: boolean;
  addresses?: (IPv4Cidr | IPv6Cidr)[];
  nameservers?: Nameservers;
  routes?: Route[];
};

type NetplanInventory = {
  ethernets: Record<IfaceName, Ethernet>;
  vlans:     Record<IfaceName, Vlan>;
  bonds:     Record<IfaceName, Bond>;
  bridges:   Record<IfaceName, Bridge>;
};


Docs alignment: VLANs use id + link; bonds and bridges use interfaces arrays. DHCP + static addresses follow Netplan examples; route metrics determine preference; optional ports avoid boot delays. 
Ubuntu People

3) Discovery & Ownership

Sources of truth (read-only):

Runtime: ip -json link, ip -json addr, ip -json route, ip -json rule, bridge -json link

On disk: parse all /{lib,etc,run}/netplan/*.yaml and build a merged view AND a per-file view.

Ownership rules

If an interface appears in multiple files, the effective config is from the lexicographically last file; we consolidate to 10-xavs.yaml (single-writer rule). 
Netplan

state.json records ownerFile for each interface. When the user edits, we edit only that file (or lift to 10-xavs.yaml if it’s baseline-owned).

Critical link detection

Current management path = ip route show default → get egress iface. Any operation on that iface triggers a modal with red banner and forces the netplan try path.

4) Authoring Netplan YAML (writer rules)

Renderer: Always set network.renderer: networkd at top level of 10-xavs.yaml.

One interface, one file: Never define the same interface in multiple files.

Where to place IPs:

If a NIC is part of a bond or bridge, assign IP/DNS/routes to the bond/bridge, not the member NICs. Members should have dhcp4: no and usually optional: true. 
Ubuntu People

VLANs get their IPs on the VLAN interface (id/link), not the parent. 
Ubuntu People

Static routes: attach under the concrete L3 interface (ethernets, vlans, bonds, or bridges). Lower metric = higher priority. DHCP-provided defaults often use metric 100; override via dhcp4-overrides.route-metric to prefer one DHCP interface. 
Ubuntu People
Netplan

5) Safe Apply Pipeline
1) Write staged yaml → /etc/netplan/10-xavs.yaml.new (atomic rename on success)
2) Validate: `netplan generate --debug` (surface parse/schema errors)
3) Trial:    `netplan try --timeout <ui_value>` (120s default) → UI countdown
   - If user presses "Confirm", we mark success.
   - If session drops / no confirm, auto-rollback occurs.
4) Finalize: `netplan apply` (only after successful try/confirm)


netplan try applies config temporarily and rolls back unless confirmed—ideal for remote servers. Also supports non-interactive confirm via signals if needed. 
Ubuntu Manpages

Cockpit execution pattern (root)

// helpers/run.js
export function run(cmd, opts = {}) {
  // cockpit is global in Cockpit frontends
  return cockpit.spawn(["bash","-lc", cmd], { superuser: "try", ...opts })
    .catch(e => { throw new Error(e.message || String(e)); });
}

6) CRUD Workflows (per type)
A) Ethernet (standalone)

Create: Add under ethernets. Choose DHCP or static (addresses[], routes[], nameservers).

Edit: If baseline-owned, lift to 10-xavs.yaml.

Delete: Remove stanza; netplan try; finalize.

Up/Down (runtime only): ip link set <iface> up|down (UI marks “transient”). Persistent disable = delete stanza.

Static example (template)

network:
  version: 2
  renderer: networkd
  ethernets:
    enp3s0:
      addresses: [10.10.10.2/24]
      nameservers:
        addresses: [10.10.10.1, 1.1.1.1]
        search: [mydomain, otherdomain]
      routes:
        - to: default
          via: 10.10.10.1


(Modeled from Netplan examples.) 
Ubuntu People

B) VLAN

Create: Under vlans, set id, link, choose DHCP/static.

Preserve IP/routes: Ensure IP and routes live on VLAN, not parent.

Delete: Remove YAML first, then optionally ip link del <vlanIface> to clean runtime immediately; run netplan try.

Guardrail: If parent is not configured/exists, block and prompt.
(See Netplan VLAN examples.) 
Ubuntu People

C) Bond

Create: Under bonds, add interfaces, parameters.mode, then put IPs/DNS/routes on the bond. Mark member NICs (in ethernets) as dhcp4: no and optional: true.

Modes: active-backup and 802.3ad as first-class options. 
Ubuntu People

Delete: Remove bond stanza; re-enable members as standalone (optional prompt to auto-add minimal stanzas).

D) Bridge

Create: Under bridges, add interfaces, put IPs/DNS/routes on the bridge. Member NIC(s) get dhcp4: no. 
Ubuntu People

KVM/Linux bridge: Common pattern: br0 with one slave, DHCP on bridge. 
Ubuntu People

E) Static Routes

Add: Append under interface routes: [{to, via, metric}].

Defaults: Use to: default with via gw; use metric to pick the primary path. You can adjust DHCP route preference with dhcp4-overrides.route-metric. 
Ubuntu People
Netplan

7) GUI/UX Contract (Cockpit)

Dynamic inventory: Left pane lists interfaces grouped by type (Ethernet, VLAN, Bond, Bridge). Each card shows: Name, Up/Down, IPv4/IPv6, DHCP/static flag, Default route badge if present.

Modals: Add/Edit/Delete/Up/Down per interface type, forms mapped 1:1 to the types above.

Critical-operation banner: If editing/downing the default-route interface (or the iface serving the user’s current session), show a red warning stating that connectivity may drop; enforce netplan try path with visible countdown.

Diff preview: Before apply, present YAML diff for 10-xavs.yaml (and 00-installer-config.yaml if lifting).

Error surfacing: Show stderr/stdout of netplan generate and try inline, anchored to offending fields if possible.

Style hooks: Reuse style.theme.css tokens; modal classes follow the existing index.html structure (per your current branch).

8) CLI Integration (server side)

Discovery

ip -json link, ip -json addr, ip -json route

bridge -json link (for bridge membership)

Lifecycle

Delete runtime device (VLAN/bridge/bond): ip link del <name> (after YAML removal so apply doesn’t recreate instantly)

Apply pipeline: netplan generate && netplan try --timeout ${ui} && netplan apply

DHCP priority: For interfaces using DHCP, prefer one by setting dhcp4-overrides.route-metric: <lower> on that interface. 
Netplan

9) Edge Cases & Guardrails

Multi-file collisions: If an interface is found in N>1 files, mark conflict and offer “Consolidate to 10-xavs.yaml” action. Explain that Netplan merges lexicographically and your file will take precedence; consolidation avoids unintended cumulative lists (e.g., DNS/addresses). 
Netplan

Default route loss: If an operation removes the last default route, block or force user to add a replacement before apply.

Parent dependencies: Cannot delete parent NIC if it has VLANs or is a bond/bridge member—show dependent list and enforce delete order.

Member IPs: If bonding/bridging a NIC that currently has an IP, the UI must offer to move the IP to the aggregate (bond/bridge).

Boot delays: Set optional: true on non-critical slave/member ports to avoid boot waits. (Documented in examples.) 
Ubuntu People

Renderer drift: If baseline uses NetworkManager, warn and offer a guided migration to networkd (outside scope of first cut; informational only).

10) YAML Templates (Copilot seeds)
10.1 10-xavs.yaml skeleton
# Managed by XAVS Networking (Cockpit). Do not edit manually unless you know what you're doing.
network:
  version: 2
  renderer: networkd

  ethernets:
    # example: enp3s0:
    #   dhcp4: true
    #   dhcp6: false
    #   routes:
    #     - to: default
    #       via: 10.10.10.1
    #   nameservers:
    #     addresses: [1.1.1.1, 8.8.8.8]
    #     search: [example.local]

  bonds:
    # example: bond0:
    #   interfaces: [enp3s0, enp4s0]
    #   parameters: { mode: active-backup, primary: enp3s0 }
    #   dhcp4: true

  bridges:
    # example: br0:
    #   interfaces: [enp3s0]
    #   dhcp4: true

  vlans:
    # example: vlan15:
    #   id: 15
    #   link: enp3s0
    #   addresses: [10.3.99.5/24]


Bridge & VLAN templates mirror Netplan docs. 
Ubuntu People

11) JS Architecture (front-end only)

Files

xavs_networking/
  index.html
  main.js
  js/
    store.js        // normalized state + ownership map
    discover.js     // enumerates runtime + parses YAML
    writer.js       // builds canonical model -> YAML string (single-writer rule)
    apply.js        // generate/try/apply orchestration
    ui/*.js         // modals, forms, diff viewer, toasts


Core contracts

// store.js
export const Store = {
  inventory: /** @type {NetplanInventory} */ ({ ethernets:{}, vlans:{}, bonds:{}, bridges:{} }),
  ownership: /** @type {Record<IfaceName, "baseline"|"xavs">} */ ({}),
  criticalIfaces: /** @type {Set<IfaceName>} */ (new Set()),
};

// discover.js
export async function loadInventory() {
  const [links, addrs, routes] = await Promise.all([
    run("ip -json link"),
    run("ip -json addr"),
    run("ip -json route"),
  ]);
  // parse netplan YAML files from /etc/netplan and build:
  // - merged view (effective)
  // - per-file view + ownership map
}

// writer.js
export function toNetplanYaml(inventory/*NetplanInventory*/) {
  // Emit one YAML doc with version:2, renderer: networkd, then ethernets/bonds/bridges/vlans
  // Guarantee single-writer: only interfaces owned by XAVS go into 10-xavs.yaml
}

// apply.js
export async function applyChanges(diff) {
  // 1) write /etc/netplan/10-xavs.yaml.new → rename
  // 2) run("netplan generate --debug")
  // 3) run(`netplan try --timeout ${uiTimeout}`)
  //    - UI displays countdown + “Confirm” → run("netplan apply")
}


Privilege escalation: all write/try/apply commands via cockpit.spawn(..., { superuser: "try" }).

12) Validation & Testing

Schema checks: Required fields by type (e.g., VLAN requires id & link; bond requires interfaces >=2; bridge requires interfaces >=1).

Round-trip test: Parse → Normalize → Emit YAML → Parse again → Compare trees (idempotence).

Safe-apply test: Change mgmt interface → verify rollback happens if not confirmed (try default timeout 120s). 
Ubuntu Manpages

Routing tests: Multiple default routes resolve by metric; DHCP preference via dhcp4-overrides.route-metric. 
Ubuntu People
Netplan

13) Phase 2 Preview (deferred)

Policy routing: Support routing-policy + per-interface routes with table: numbers for source‑based routing; expose priority in UI. Netplan supports this on networkd; examples show table+policy combos. For deeper knobs, consult systemd’s [RoutingPolicyRule] options. 
Ubuntu People
FreeDesktop

Virtual/tunnel types: WireGuard, GRE, VXLAN, MACVLAN, SR-IOV VFs, etc. (Netplan supports these under tunnels and others.) 
Ubuntu People

14) Known Good Patterns (from docs)

Bridging a physical: put IP/DHCP on br0; member NIC has dhcp4: no. 
Ubuntu People

Bonding: put IP on bond; members set to dhcp4: no, often optional: true; common modes: active-backup, 802.3ad. 
Ubuntu People

DHCP priority: set dhcp4-overrides.route-metric to prefer one interface when multiple DHCP links exist. 
Ubuntu People
Netplan


---

### Notes on the two reference pages you gave

- **Netplan examples**: Bridges, VLANs, bonds, multiple addresses/gateways, route metrics, routing-policy—these are the canonical YAML patterns the spec mirrors. :contentReference[oaicite:26]{index=26}  
- **systemd `[RoutingPolicyRule]`** (Phase 2): Use for advanced PBR; netplan exposes this via `routing-policy`. We’ve left hooks in the model (`table`, etc.) for a future release. :contentReference[oaicite:27]{index=27}

---

## What Copilot will infer quickly from this file

- The **file/folder structure**, function names, and type contracts (it will propose the missing JS in `discover.js`, `writer.js`, `apply.js`, and UI forms).  
- The **YAML generation logic**, including exactly where to place IPs/routes for bonds/bridges/VLANs.  
- The **safe apply** orchestration (`generate → try → apply`) with Cockpit’s `superuser: "try"` execution model.  
- The **guardrails** (critical-interface warning, dependency checks, ownership consolidation).  

If you want, I can also generate **starter stubs** for `discover.js`, `writer.js`, and `apply.js` following this spec, but this single SPEC.md should be enough for Copilot to scaffold those files on its own.

---

### Citations (key behaviors drawn from upstream docs)
- Netplan config merge & lexicographic order across `/run`, `/etc`, `/lib`. :contentReference[oaicite:28]{index=28}  
- `netplan try` semantics & default 120s rollback window. :contentReference[oaicite:29]{index=29}  
- Canonical VLAN/Bridge/Bond, multiple addresses/gateways, metrics, optional ports, routing‑policy examples. :contentReference[oaicite:30]{index=30}  
- DHCP route preference via `dhcp4-overrides.route-metric`. :contentReference[oaicite:31]{index=31}  
- systemd `[RoutingPolicyRule]` reference for Phase 2. :contentReference[oaicite:32]{index=32}

---

**Next steps (recommended)**  
1) Drop this file at `docs/XAVS-Networking-SPEC.md`.  
2) Open `main.js` and create `js/store.js`, `js/discover.js`, `js/writer.js`, `js/apply.js` per the contracts above—let Copilot autocomplete the scaffolds from the spec verbiage.  
3) Wire the modals you already have (`index.html`, `style.theme.css`) to call `discover → writer → apply` flows with the warnings/confirmations described.

This is engineered for low‑touch operational excellence and minimal blast radius—your north star for a production‑grade control plane.
::contentReference[oaicite:33]{index=33}
