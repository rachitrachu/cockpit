# Network Management Infrastructure SOP
## Using systemd-networkd with Netplan

---

**Document Version:** 1.0  
**Date:** September 8, 2025  
**Prepared for:** Network Infrastructure Team  
**Backend:** systemd-networkd (NOT NetworkManager)

---

## Table of Contents

1. [Overview](#overview)
2. [Prerequisites](#prerequisites)
3. [System Setup and Validation](#system-setup-and-validation)
4. [Configuration Standards](#configuration-standards)
5. [Implementation Procedures](#implementation-procedures)
6. [Common Network Scenarios](#common-network-scenarios)
7. [Security Guidelines](#security-guidelines)
8. [Monitoring and Troubleshooting](#monitoring-and-troubleshooting)
9. [Change Management](#change-management)
10. [Emergency Procedures](#emergency-procedures)
11. [Documentation and Compliance](#documentation-and-compliance)
12. [Appendices](#appendices)

---

## 1. Overview

### 1.1 Purpose
This SOP establishes standardized procedures for implementing and managing network infrastructure using systemd-networkd as the backend through Netplan configuration management.

### 1.2 Scope
- Physical server network configuration
- Virtual machine networking
- Container host networking
- Network security implementation
- Performance optimization
- Disaster recovery procedures

### 1.3 Key Principles
- **Declarative Configuration**: All network settings defined in YAML
- **Version Control**: All configurations tracked in Git
- **Testing First**: Mandatory testing before production deployment
- **Rollback Ready**: All changes must have rollback procedures
- **Documentation**: Comprehensive change documentation required

---

## 2. Prerequisites

### 2.1 System Requirements
- Ubuntu 18.04+ or compatible systemd-based distribution
- systemd-networkd enabled and running
- Netplan installed (version 0.99+)
- Git for configuration management
- Root or sudo access

### 2.2 Team Skills Required
- YAML syntax proficiency
- Linux networking fundamentals
- systemd service management
- Git version control
- Network troubleshooting

### 2.3 Tools and Dependencies
```bash
# Required packages
sudo apt update
sudo apt install netplan.io systemd-networkd git vim curl iproute2

# Optional but recommended
sudo apt install bridge-utils vlan tcpdump wireshark-common
```

---

## 3. System Setup and Validation

### 3.1 Initial System Configuration

#### 3.1.1 Disable NetworkManager (CRITICAL)
```bash
# Stop and disable NetworkManager
sudo systemctl stop NetworkManager
sudo systemctl disable NetworkManager
sudo systemctl mask NetworkManager

# Verify NetworkManager is disabled
sudo systemctl status NetworkManager
```

#### 3.1.2 Enable systemd-networkd
```bash
# Enable and start systemd-networkd
sudo systemctl enable systemd-networkd
sudo systemctl start systemd-networkd

# Enable systemd-resolved for DNS
sudo systemctl enable systemd-resolved
sudo systemctl start systemd-resolved

# Create DNS symlink
sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
```

#### 3.1.3 Validate Netplan Configuration
```bash
# Check current renderer
sudo netplan get renderer

# Should output: networkd
# If not, see Section 3.2 for fixing
```

### 3.2 Force networkd Renderer

#### 3.2.1 Global Renderer Configuration
Create `/etc/netplan/01-renderer.yaml`:
```yaml
network:
  version: 2
  renderer: networkd
```

#### 3.2.2 Validation Commands
```bash
# Apply configuration
sudo netplan apply

# Verify networkd is managing interfaces
sudo networkctl status

# Check systemd-networkd status
sudo systemctl status systemd-networkd
```

---

## 4. Configuration Standards

### 4.1 File Naming Convention
- `01-renderer.yaml` - Global renderer setting
- `10-management.yaml` - Management interfaces
- `20-production.yaml` - Production interfaces  
- `30-storage.yaml` - Storage network interfaces
- `40-backup.yaml` - Backup network interfaces
- `50-vlan.yaml` - VLAN configurations
- `60-bridge.yaml` - Bridge configurations
- `70-bond.yaml` - Bond/aggregation configurations
- `80-tunnel.yaml` - Tunnel configurations
- `90-custom.yaml` - Custom/temporary configurations

### 4.2 YAML Structure Standards

#### 4.2.1 Required Headers
```yaml
# Network Configuration - [Purpose]
# Environment: [Production/Staging/Development]
# Created: [Date]
# Author: [Name]
# Last Modified: [Date]
# Change Request: [Ticket Number]

network:
  version: 2
  renderer: networkd
```

#### 4.2.2 Interface Naming Standards
- Physical interfaces: Use consistent naming (eth0, eno1, etc.)
- Virtual interfaces: Descriptive names (br-mgmt, bond-prod, vlan-100)
- Match by MAC address for critical interfaces

#### 4.2.3 IP Address Management
- Use CIDR notation for all addresses
- Document IP ranges in comments
- Reserve .1-.10 for infrastructure
- Use consistent subnetting schemes

### 4.3 Configuration Templates

#### 4.3.1 Basic Static Interface
```yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      addresses:
        - 192.168.1.100/24
      nameservers:
        addresses: [8.8.8.8, 1.1.1.1]
        search: [company.local]
      routes:
        - to: default
          via: 192.168.1.1
      optional: false
```

#### 4.3.2 DHCP Interface with Overrides
```yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: true
      dhcp6: false
      dhcp4-overrides:
        use-dns: true
        use-routes: true
        send-hostname: true
        route-metric: 100
      optional: false
```

#### 4.3.3 Bonded Interface
```yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: false
    eth1:
      dhcp4: false
  bonds:
    bond0:
      interfaces: [eth0, eth1]
      addresses: [192.168.1.100/24]
      parameters:
        mode: active-backup
        primary: eth0
        mii-monitor-interval: 100
        up-delay: 200
        down-delay: 200
      routes:
        - to: default
          via: 192.168.1.1
```

---

## 5. Implementation Procedures

### 5.1 Pre-Implementation Checklist

- [ ] Configuration peer reviewed
- [ ] Backup of current configuration created
- [ ] Test environment validation completed
- [ ] Change window scheduled
- [ ] Rollback procedure documented
- [ ] Emergency contact list updated

### 5.2 Configuration Deployment Process

#### 5.2.1 Preparation Phase
```bash
# 1. Create configuration backup
sudo mkdir -p /backup/netplan/$(date +%Y%m%d_%H%M%S)
sudo cp -r /etc/netplan/* /backup/netplan/$(date +%Y%m%d_%H%M%S)/

# 2. Validate current state
sudo netplan get all > /tmp/current-config.yaml
sudo networkctl status > /tmp/current-status.txt
```

#### 5.2.2 Configuration Testing
```bash
# 1. Syntax validation
sudo netplan generate

# 2. Configuration validation (dry-run)
sudo netplan --debug generate

# 3. Test configuration (if available)
sudo netplan try --timeout 30
```

#### 5.2.3 Production Deployment
```bash
# 1. Apply configuration
sudo netplan apply

# 2. Verify interface status
sudo networkctl status

# 3. Test connectivity
ping -c 4 8.8.8.8
ping -c 4 gateway_ip

# 4. Verify DNS resolution
nslookup google.com
```

### 5.3 Post-Implementation Validation

#### 5.3.1 Network Connectivity Tests
```bash
# Basic connectivity
ping -c 4 default_gateway
ping -c 4 8.8.8.8
ping -c 4 internal_dns_server

# DNS resolution
nslookup company.local
host -t MX company.local

# Route verification
ip route show
ip -6 route show
```

#### 5.3.2 Service Status Verification
```bash
# systemd-networkd status
sudo systemctl status systemd-networkd

# systemd-resolved status  
sudo systemctl status systemd-resolved

# Interface status
sudo networkctl status
sudo networkctl list
```

---

## 6. Common Network Scenarios

### 6.1 Server Network Configuration

#### 6.1.1 Single Interface Server
```yaml
# File: /etc/netplan/10-server-single.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eno1:
      match:
        macaddress: "aa:bb:cc:dd:ee:ff"
      addresses:
        - 10.0.1.100/24
      nameservers:
        addresses: [10.0.1.1, 10.0.1.2]
        search: [company.local]
      routes:
        - to: default
          via: 10.0.1.1
          metric: 100
      optional: false
```

#### 6.1.2 Multi-Interface Server
```yaml
# File: /etc/netplan/20-server-multi.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    # Management interface
    eno1:
      match:
        macaddress: "aa:bb:cc:dd:ee:01"
      addresses:
        - 192.168.100.100/24
      nameservers:
        addresses: [192.168.100.1]
      routes:
        - to: default
          via: 192.168.100.1
          metric: 100
    # Production interface  
    eno2:
      match:
        macaddress: "aa:bb:cc:dd:ee:02"
      addresses:
        - 10.1.1.100/24
      routes:
        - to: 10.1.0.0/16
          via: 10.1.1.1
          metric: 200
    # Storage interface
    eno3:
      match:
        macaddress: "aa:bb:cc:dd:ee:03"
      addresses:
        - 172.16.1.100/24
```

### 6.2 VLAN Configuration

#### 6.2.1 Multiple VLANs on Single Interface
```yaml
# File: /etc/netplan/50-vlans.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: false
      dhcp6: false
  vlans:
    vlan100:
      id: 100
      link: eth0
      addresses:
        - 10.100.1.100/24
      nameservers:
        addresses: [10.100.1.1]
    vlan200:
      id: 200  
      link: eth0
      addresses:
        - 10.200.1.100/24
    vlan300:
      id: 300
      link: eth0
      dhcp4: true
```

### 6.3 Bridge Configuration

#### 6.3.1 Virtual Machine Host Bridge
```yaml
# File: /etc/netplan/60-vm-bridge.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: false
    eth1:
      dhcp4: false
  bridges:
    br-vm:
      interfaces: [eth0]
      addresses:
        - 192.168.1.100/24
      nameservers:
        addresses: [192.168.1.1]
      routes:
        - to: default
          via: 192.168.1.1
      parameters:
        stp: true
        forward-delay: 4s
```

### 6.4 High Availability Configuration

#### 6.4.1 Active-Backup Bond
```yaml
# File: /etc/netplan/70-ha-bond.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: false
    eth1:
      dhcp4: false
  bonds:
    bond0:
      interfaces: [eth0, eth1]
      addresses:
        - 192.168.1.100/24
      nameservers:
        addresses: [192.168.1.1, 192.168.1.2]
      routes:
        - to: default
          via: 192.168.1.1
      parameters:
        mode: active-backup
        primary: eth0
        mii-monitor-interval: 100
        up-delay: 200
        down-delay: 200
        fail-over-mac-policy: active
```

#### 6.4.2 LACP Bond (802.3ad)
```yaml
# File: /etc/netplan/70-lacp-bond.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: false
    eth1:
      dhcp4: false
  bonds:
    bond0:
      interfaces: [eth0, eth1]
      addresses:
        - 192.168.1.100/24
      parameters:
        mode: 802.3ad
        lacp-rate: fast
        mii-monitor-interval: 100
        transmit-hash-policy: layer3+4
        min-links: 1
```

---

## 7. Security Guidelines

### 7.1 Network Security Best Practices

#### 7.1.1 Interface Security
- Always specify explicit interface matching (MAC addresses)
- Disable unused interfaces
- Use separate networks for management traffic
- Implement proper firewall rules

#### 7.1.2 Configuration File Security
```bash
# Set proper permissions on netplan files
sudo chmod 600 /etc/netplan/*.yaml
sudo chown root:root /etc/netplan/*.yaml

# Verify permissions
ls -la /etc/netplan/
```

#### 7.1.3 DNS Security
```yaml
# Use secure DNS servers
nameservers:
  addresses: 
    - 1.1.1.1      # Cloudflare
    - 8.8.8.8      # Google
    - 9.9.9.9      # Quad9
  search: [company.local]
```

### 7.2 Access Control

#### 7.2.1 Management Network Isolation
```yaml
# Separate management interface
ethernets:
  mgmt0:
    match:
      macaddress: "aa:bb:cc:dd:ee:ff"
    addresses:
      - 192.168.100.100/24
    nameservers:
      addresses: [192.168.100.1]
    routes:
      - to: 192.168.100.0/24
        via: 192.168.100.1
        metric: 50
```

### 7.3 Monitoring and Logging

#### 7.3.1 Enable systemd-networkd Debugging
```bash
# Enable debug logging
sudo mkdir -p /etc/systemd/system/systemd-networkd.service.d
sudo tee /etc/systemd/system/systemd-networkd.service.d/debug.conf << EOF
[Service]
Environment=SYSTEMD_LOG_LEVEL=debug
EOF

sudo systemctl daemon-reload
sudo systemctl restart systemd-networkd
```

---

## 8. Monitoring and Troubleshooting

### 8.1 System Monitoring

#### 8.1.1 Essential Monitoring Commands
```bash
# Interface status
sudo networkctl status
sudo networkctl list

# System routing
ip route show
ip -6 route show

# DNS resolution
systemd-resolve --status
systemd-resolve --statistics

# Service status
sudo systemctl status systemd-networkd
sudo systemctl status systemd-resolved
```

#### 8.1.2 Log Analysis
```bash
# networkd logs
sudo journalctl -u systemd-networkd -f

# resolved logs  
sudo journalctl -u systemd-resolved -f

# All network-related logs
sudo journalctl -t systemd-networkd -t systemd-resolved --since "1 hour ago"
```

### 8.2 Common Issues and Solutions

#### 8.2.1 Interface Not Coming Up
```bash
# Check interface status
sudo networkctl status interface_name

# Check for configuration errors
sudo netplan --debug generate

# Restart networkd
sudo systemctl restart systemd-networkd

# Force interface reconfiguration
sudo networkctl reload
sudo networkctl reconfigure interface_name
```

#### 8.2.2 DNS Resolution Issues
```bash
# Check resolved status
systemd-resolve --status

# Test DNS resolution
systemd-resolve google.com

# Restart systemd-resolved
sudo systemctl restart systemd-resolved

# Verify DNS configuration
cat /etc/systemd/resolved.conf
```

#### 8.2.3 Routing Issues
```bash
# Check routing table
ip route show table all

# Add temporary route
sudo ip route add 10.0.0.0/8 via 192.168.1.1

# Flush route cache
sudo ip route flush cache
```

### 8.3 Performance Monitoring

#### 8.3.1 Network Interface Statistics
```bash
# Interface statistics
cat /proc/net/dev

# Detailed interface info
sudo ethtool eth0

# Monitor traffic
sudo iftop -i eth0
sudo nethogs
```

#### 8.3.2 Connection Monitoring
```bash
# Active connections
ss -tuln

# Network neighbors
ip neighbor show

# ARP table
arp -a
```

---

## 9. Change Management

### 9.1 Change Request Process

#### 9.1.1 Pre-Change Requirements
1. **Documentation**: Complete configuration documentation
2. **Testing**: Successful testing in non-production environment
3. **Approval**: Manager and senior engineer approval
4. **Scheduling**: Maintenance window coordination
5. **Rollback Plan**: Detailed rollback procedures

#### 9.1.2 Change Documentation Template
```markdown
## Network Change Request

**Change ID**: NCR-YYYY-NNNN
**Date**: YYYY-MM-DD
**Engineer**: Name
**Reviewer**: Name
**Environment**: Production/Staging/Development

### Description
Brief description of the change

### Justification
Business reason for the change

### Impact Assessment
- Systems affected: [List]
- Downtime expected: [Duration]
- Risk level: Low/Medium/High

### Implementation Plan
1. Step 1
2. Step 2
3. Step 3

### Testing Performed
- [ ] Syntax validation
- [ ] Lab testing
- [ ] Staging environment testing

### Rollback Plan
1. Rollback step 1
2. Rollback step 2
3. Rollback step 3

### Success Criteria
- [ ] Criterion 1
- [ ] Criterion 2
- [ ] Criterion 3
```

### 9.2 Version Control

#### 9.2.1 Git Repository Structure
```
netplan-configs/
├── environments/
│   ├── production/
│   ├── staging/
│   └── development/
├── templates/
├── scripts/
└── documentation/
```

#### 9.2.2 Git Workflow
```bash
# Clone repository
git clone https://git.company.com/network/netplan-configs.git

# Create feature branch
git checkout -b feature/new-server-config

# Make changes and commit
git add .
git commit -m "Add configuration for new web server"

# Push and create pull request
git push origin feature/new-server-config
```

---

## 10. Emergency Procedures

### 10.1 Network Outage Response

#### 10.1.1 Immediate Response (0-5 minutes)
```bash
# 1. Assess current state
sudo networkctl status
sudo systemctl status systemd-networkd

# 2. Check recent changes
sudo journalctl -u systemd-networkd --since "30 minutes ago"

# 3. Quick connectivity test
ping -c 3 default_gateway
```

#### 10.1.2 Investigation Phase (5-15 minutes)
```bash
# 1. Check configuration syntax
sudo netplan --debug generate

# 2. Review recent configurations
ls -la /etc/netplan/
sudo netplan get all

# 3. Check for hardware issues
sudo dmesg | grep -i network
sudo ethtool eth0
```

#### 10.1.3 Recovery Actions
```bash
# Option 1: Restart networkd
sudo systemctl restart systemd-networkd

# Option 2: Reload configuration
sudo netplan apply

# Option 3: Rollback to previous configuration
sudo cp /backup/netplan/YYYYMMDD_HHMMSS/* /etc/netplan/
sudo netplan apply

# Option 4: Emergency network configuration
sudo ip addr add 192.168.1.100/24 dev eth0
sudo ip route add default via 192.168.1.1
```

### 10.2 Rollback Procedures

#### 10.2.1 Automated Rollback Script
```bash
#!/bin/bash
# File: /usr/local/bin/netplan-rollback.sh

BACKUP_DIR="/backup/netplan"
LATEST_BACKUP=$(ls -t $BACKUP_DIR | head -n1)

echo "Rolling back to: $LATEST_BACKUP"

# Backup current config
mkdir -p $BACKUP_DIR/emergency-$(date +%Y%m%d_%H%M%S)
cp -r /etc/netplan/* $BACKUP_DIR/emergency-$(date +%Y%m%d_%H%M%S)/

# Restore previous config
cp -r $BACKUP_DIR/$LATEST_BACKUP/* /etc/netplan/

# Apply configuration
netplan apply

echo "Rollback completed"
```

### 10.3 Emergency Contacts

#### 10.3.1 Escalation Matrix
1. **Level 1**: Network Engineer (On-call)
2. **Level 2**: Senior Network Engineer
3. **Level 3**: Network Manager
4. **Level 4**: IT Director

#### 10.3.2 Emergency Communication
- Primary: Company chat system
- Secondary: Phone/SMS
- Emergency: Direct phone escalation

---

## 11. Documentation and Compliance

### 11.1 Configuration Documentation

#### 11.1.1 Required Documentation
- Network topology diagrams
- IP address management spreadsheets
- VLAN assignments
- Security zone mappings
- Change history logs

#### 11.1.2 Configuration Comments
```yaml
# Always include descriptive comments
network:
  version: 2
  renderer: networkd
  
  # Management network - VLAN 100
  # Used for: Server management, monitoring, backups
  # Security zone: Management
  vlans:
    mgmt:
      id: 100
      link: eth0
      addresses:
        - 10.100.1.50/24  # Static assignment from IPAM
```

### 11.2 Compliance Requirements

#### 11.2.1 Audit Trail
- All changes must be logged
- Configuration backups retained for 12 months
- Change approvals documented
- Security reviews completed

#### 11.2.2 Security Compliance
- Regular security assessments
- Vulnerability scanning
- Access control reviews
- Configuration validation

---

## 12. Appendices

### Appendix A: networkd-specific Features

#### A.1 systemd-networkd Advantages
- Native systemd integration
- Robust service management
- Efficient resource usage
- Container-friendly
- Predictable behavior

#### A.2 networkd Limitations
- No native Wi-Fi support (requires wpa_supplicant)
- Limited GUI tools
- Less third-party integration
- Fewer dynamic features than NetworkManager

### Appendix B: Validation Scripts

#### B.1 Configuration Validation Script
```bash
#!/bin/bash
# File: /usr/local/bin/validate-netplan.sh

echo "Validating Netplan configuration..."

# Check syntax
if ! sudo netplan generate; then
    echo "ERROR: Configuration syntax error"
    exit 1
fi

# Check for required renderer
if [ "$(sudo netplan get renderer)" != "networkd" ]; then
    echo "ERROR: Renderer is not set to networkd"
    exit 1
fi

# Check systemd-networkd status
if ! sudo systemctl is-active --quiet systemd-networkd; then
    echo "ERROR: systemd-networkd is not running"
    exit 1
fi

echo "Configuration validation passed"
```

#### B.2 Network Connectivity Test Script
```bash
#!/bin/bash
# File: /usr/local/bin/test-connectivity.sh

# Test basic connectivity
test_connectivity() {
    local host=$1
    local description=$2
    
    if ping -c 3 -W 5 $host > /dev/null 2>&1; then
        echo "✓ $description ($host) - OK"
    else
        echo "✗ $description ($host) - FAILED"
        return 1
    fi
}

echo "Testing network connectivity..."

# Test default gateway
GATEWAY=$(ip route | grep default | awk '{print $3}' | head -n1)
test_connectivity $GATEWAY "Default Gateway"

# Test DNS servers
test_connectivity 8.8.8.8 "Google DNS"
test_connectivity 1.1.1.1 "Cloudflare DNS"

# Test DNS resolution
if nslookup google.com > /dev/null 2>&1; then
    echo "✓ DNS Resolution - OK"
else
    echo "✗ DNS Resolution - FAILED"
fi

echo "Connectivity test completed"
```

### Appendix C: Troubleshooting Flowchart

```
Network Issue Detected
         |
         v
Check systemd-networkd status
         |
    [Running?] ─── No ──→ Start service
         |                    |
        Yes                   v
         |              Apply config
         v
Check netplan syntax
         |
    [Valid?] ─── No ──→ Fix syntax errors
         |                    |
        Yes                   v
         |              Validate & apply
         v
Check interface status
         |
   [Up/Running?] ─── No ──→ Check hardware
         |                    |
        Yes                   v
         |              Check cables/ports
         v
Check routing table
         |
   [Correct routes?] ─── No ──→ Fix routing config
         |                         |
        Yes                        v
         |                   Apply changes
         v
Check DNS resolution
         |
   [Working?] ─── No ──→ Fix DNS config
         |                    |
        Yes                   v
         |              Restart resolved
         v
Escalate to Level 2
```

### Appendix D: Reference Links

#### D.1 Official Documentation
- [Netplan Documentation](https://netplan.readthedocs.io/)
- [systemd-networkd Manual](https://www.freedesktop.org/software/systemd/man/systemd-networkd.html)
- [systemd-resolved Manual](https://www.freedesktop.org/software/systemd/man/systemd-resolved.html)

#### D.2 Command Quick Reference
```bash
# Essential commands for daily operations
sudo netplan generate          # Generate configuration
sudo netplan apply            # Apply configuration  
sudo netplan try             # Test configuration with rollback
sudo netplan get all         # Show current configuration
sudo networkctl status       # Show interface status
sudo networkctl list         # List all interfaces
sudo systemctl status systemd-networkd  # Check service status
sudo journalctl -u systemd-networkd -f  # Follow logs
```

---

**End of Document**

*This SOP should be reviewed and updated quarterly or when significant infrastructure changes occur.*
